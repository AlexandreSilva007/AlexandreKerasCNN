# -*- coding: utf-8 -*-
"""ChestXRayAlexandress.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pi0vwE_kkJGLG6Bf9GnH4_QJOgxsAk0g
"""

!rm -rf AlexandreKerasCNN
!git clone https://github.com/AlexandreSilva007/AlexandreKerasCNN.git
!ls AlexandreKerasCNN

!pip install -U -q PyDrive
!pip install -U scikit-learn
!pip install -U imbalanced-learn


import time
import numpy as np
import os
import urllib.request

from AlexandreKerasCNN.Functions import ActivationFunction, LossFunction, OptimizerFunction
from AlexandreKerasCNN.Kernel import Kernel
from AlexandreKerasCNN.ChestXRay import ChestXRay

import warnings
warnings.filterwarnings("ignore")

name = 'KerasCNNModel_' +  str(time.time()).replace('.','') + '.h5'

modelo = ChestXRay(2,'xray')
modelo.loadChestXRayFromDrive()


modelo.add2DConvolutionLayer(32, Kernel((2,2), has_padding=True))
modelo.add2DMaxPoolingLayer((2,2))
modelo.addDropoutLayer(0.2)
print('F1: ')
modelo.printImageSamples(size=(18,9), columns=6,rows=3, img_data_array=modelo.input_train)


modelo.add2DConvolutionLayer(32, Kernel((2,2), has_padding=False))
modelo.add2DMaxPoolingLayer((2,2))
modelo.addDropoutLayer(0.2)
print('F2: ')
modelo.printImageSamples(size=(18,9), columns=6,rows=3, img_data_array=modelo.input_train)


modelo.add2DConvolutionLayer(32, Kernel((2,2), has_padding=False))
modelo.add2DMaxPoolingLayer((2,2))
modelo.addDropoutLayer(0.2)
print('F3: ')
modelo.printImageSamples(size=(18,9), columns=6,rows=3, img_data_array=modelo.input_train)

#novo
modelo.add2DConvolutionLayer(32, Kernel((2,2), has_padding=False))
modelo.add2DMaxPoolingLayer((2,2))
modelo.addDropoutLayer(0.2)
print('F4: ')
modelo.printImageSamples(size=(18,9), columns=6,rows=3, img_data_array=modelo.input_train)


#Camada Totalmente Conectada (2)
modelo.addFullyConnectedLayer(1000, ActivationFunction.ReLU() )
modelo.addFullyConnectedLayer(512, ActivationFunction.Sigmoid() )
modelo.addFullyConnectedLayer(1000, ActivationFunction.ReLU() )

#Camada de Sa√≠da
modelo.addOutputLayer( ActivationFunction.SoftMax() )

#Run
modelo.configureLearning(LossFunction.CATEGORICAL_CROSS_ENTROPY, OptimizerFunction.Adam(0.0005), batch_size=32, epochs=1000, augment_data=False)
print('go!')
modelo.train(verbose=0) # treina e salva modelo+pesos
print('finish')
modelo.evaluate()

modelo.download()